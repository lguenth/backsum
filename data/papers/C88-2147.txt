The resulting system, Feature Structure based Tree Adjoining Grammars (FTAG), captures the princi- ple of factoring dependencies and recursion, fundamental to TAGs.
Wc show that FTAG has an enhanced escriptive capacity compared to TAG formalisnr.
We consider some restricted versions of this system and some possible linguistic stipulations that can be made.
We briefly describe a calculus to represent the structures used by this system, extending on the work of Rounds, and Kasper [Rounds et al.
1986, Kasper et al.
1986] involving the logical formulation of feature structures.
S S Np / ~ ~ VP DET N V I I I the man met U I U 2 U 3 Figure 1: Initial Trees NNNp / DET I ~c  N I woman 1 Int roduct ion Tree Adjoining Grammars (TAG) were first introduced by Joshi, Levy, and Takalmshi [Joshi et al.
The first study of this system, from the point of view of its formal properties and linguistic applicability, was carried out by Joshi in [Joshi 1985].
TAGs have been used in providing linguistic analyses; a detailed study of the linguistic relevance was done by Kroch and Joshi in [Kroch et al.
In this paper, we show lmw TAGs can be embedded in a feature struc- ture based framework.
Feature structure based Tree Adjoining Grammars (FTAG) are introduced in Section 2, and is f611owed by a comparsion of the descriptive capacity of FTAG and TAG.
A restricted version of FTAG is proposed and some possible linguistic stipulations are considered.
In Section 3, we introduce a calculus, which is an extension of the logical calculus of Rounds and Kasper [Rounds et al.
1986, Kasper et al.
1986] allowing A-abstraction and application, in order to describe the structures used in FTAGs.
Finally, in Section 4, we summarize the work presented in this paper.
1.1 In t roduct ion  to  T ree  Ad jo in ing  Grammars Tree Adjoining Grammars (TAG), unlike other grammatical systems used in computational linguistics, is a tree rewriting system.
Unlike the string rewriting formalisms which writes recursion into the rules that generate the phrase structure, a TAG factors reeursion and dependencies into a finite set of elementary trees.
The elementary trees in a TAG correspond to minimal inguistic structures that localize the dependencies such as agreement, subcategorization, a d filler-gap.
There are two kinds of el- enrentary trees: the initial trees and auxiliary trees.
The initial trees roughly (Figure 1) correspond to simple sentences.
Thus, the root of an initial trce is labelled by the symbol S. They are required to have a frontier made up of terminals.
The auxiliary trees (Figure 2) correspond roughly to minimal recur- sive constructions.
Thus, if the root of an auxiliary tree is labelled by a nonterminal symbol, X, then there is a node (called the foot node) in the frontier of this tree which is labelled by X.
The rest of the nodes in the frontier are labelled by terminal symbols.
1This work was partially supported by NSF grants MCS-82-19116-CER, DCR-84- 10413,ARO ffrant DAA29-84-9-~027, and DARPA grant N0014-85-K0018 714 X vl ~v2 foot node NP / ~s who I I e V Figure 2: Auxiliary Trees We will now define the operation of adjunction.
Let 7 be a tree with a node labelled by X.
Let fl be an auxiliary tree, whose root and foot node are also labelled by X.
Then, adjoining/3 at the node labelled by X in 7 will result in tbe tree illustrated in Figure 3.
In Figure 3, we also S u 2 NP wu/  DL:rr N I l 1 N f ~ man who j I e V $ vP V/" ~NP I /N Dl~r N I I ~e Woman Figure 3: The operation of adjoinfng show tl~e result of adjoining the auxiliary tree fll at the subject NP node of the initial tree al .
So far, the only restriction we have placed on the set of auxiliary trees that can be adjoined at a node is that the label of the node must be the same as the label of tile root (and the foot) node of the auxiliary tree.
Fmther estriction on this set of auxiliary trees is done by enumerating with each node the subset of anxiliary trees which can be adjoined at that node.
This specification of a set of auxiliary trees, which can be adjoined at a node, is called the Selective Adjoining (SA) constraints.
In tim case where we specify the empty set, we say that the node has a Nail Adjoining (NA)  constraint:~.
It is possible to insist that adjunction is mandatory at a node.
In such a case, wc say that the node has an Obligatory Adjoining (OA) constraint.
A more detailed description of TAGs and their linguistic relevance may be found in [Kroeh et al.
1.2 Feature  S t ructure  Based  Grammat ica l  Sys tems Several different approaches to natural anguage granunars have devel- oped the notion of feature structures to describe linguistic objects.
In order to capture certain linguistic phenomena such as agreement, subcat- egorization, cte., a number of.
recent grammatical systems have added, on top of a CFG skclcton, a feature based informatioual element.
Ex- ample or" sncb systems (see [Shieber 1985a]) include Generalized Phrase Structure Grammars (GPSG), Lexical functional Grammars (LFG), and tIead-driven Phrase Structure Grammars (IIPSG).
A feature structure (as given below) is essentially a set of attribute-value pairs where values may be atomic ~*ymbols or another feature structure.
cat : S cat [ :  [  ]  agr cat : 2 : agr : subject 53 "1 [] [] Tim notation of the co-indexing box (  [  ]  in this example) is used to ex- press the f;~ct hat the values of two subfeatures are the stone.
Feature structures with co-indexing boxes have also been called reentrant feature structures in the literature.
We can define a partial ordering, E, on a set of feature structures using tbe notion of subsnmption (carries less in/ormalion or is more gen- eral).
Unification of two feat,re structures (if it is defined) corresponds to the feature ~;tructure that has all the information contained in the original two feal;nre structures and nothing more.
We will not describe feature structur,~s any fnrther (see [Shieber 1985a] for more details on fea- turc structures and an introduction to the unification based approach to grammars).
2 Featme Structure Based Tree Adjoining Grammars  (FTAG) The linguistic theory underlying TAGs is centered around the factor- ization of reeursion and localization of dependencies into the elementary trees.
The "dependent" items usually belong to the same elementary tree 2.
Thus, for example, the predicate and its arguments will be in the same tree, as will the filler and the gap.
Our main goal in embedding TAGs in an unificational framework is to capture this localization of de- pendencies.
Therefore, we would like to associate f ature structures with the elementary trees (rather than break these trees into a CFG-like rule based systems, and then use some mechanism to ensure only the trees prodnced by the "lAG itself are generateda)~ In tbd:feature structures 2It is eometime~ possible for "dependent" iterem to belong to an elementary tree and the immediate auxiliary tree that is adjoined in it.
aSuch a scheme wotdd be an alternate way of embedding TAGs in an unifieational framework.
IIowever, it does not capture the linguistic intuitions tmderlying TAGs, and losc~ the attractive f ature of localizing depende~tcles.
associated with the elementary trees, we can state the constraints among the dependent nodes dircctly.
IIence, in an initial tree corresponding to a simple sentence, wc can state that the main verb and the subject NP (which are part of the same initial tree) share the agreement feature.
Thus, such checking, in many cases, can be precompiled (of course only after lexical insertion) and need not be done dynamically.
2.1 Genera l  Schema Ill unification grammars, a feature structure is associated with a node in a derivation tree in order to describe that node and its realtion to featnres of other nodes in tile derivation tree.
In a TAG, any node in an elementary tree is related to the other nodes in that trec in two ways.
Feature structures written in FTAG using the standard matrix notation, describing a node, ~h can be made on the basis of: 1. the relation of I 1 to its supertrce, i.e., tile view of the uode from the top.
Let us call this feature structure as t,~.
2. the rclation to its descendants, i.e., the view from below.
This feature structure is called bo.
Note that both the t,~ and b,~ feature structure hold of the node r l. In a derivation tree of a CFG based unification system, wc associate one featnre structure with a node (the unification of these two structures) since both the statements, t and b, together hold for the node, and uo further nodes are introduced between the nodes supertrce and subtrec.
This property is not trne in a TAG.
On adjunction, at a node there is ~o longer a single node; rather ~ul auxiliary trec replaces the node.
Wc believe that this approach of ~sociating two statements with a node in the auxiliary tree is iu the spirit of TAGs because of the OA constraints in TAGs.
A node with OA constraints cannot bc viewed as a single node and must be considered as something that has to be replaced by an auxiliary tree.
t and b axe restrictions about tile auxiliary tree that must be adjoined at this node.
Note that if the node does not have OA constraint then we should expect and b to be compatible.
For example, in the final sentential tree, this node will be viewed as a single entity.
Thus, in general, with every internal node, ~, (i.e., where adjunction could take place), we associate two structures, tn and b n. With each terminal node, we would associate only one structure 4, xtroot t fo~t X___-~ bfoot Figure 4: Feature structures and adjunction 4It is posslblc to allow adjunctlons at nodes corresponding to pre-lexlcal items.
For example, we may wish to obtain verb-clusters by adiunctions atnodes which are labelled ~s verbs.
In such a c~se, we will have to associate two feature structures with pre.lexical nodes too.
715 Let Us now consider the case when adjoining takes place as showu in the figure 4.
The notation we use is to write alongside ach node, the t and b statements, with the t statement written above the b statement.
Let us say that t~oot,b~oot aud tloo~,b/oo~ are the t and b statements of the root and foot nodes of the auxiliary tree used for adjunction at the node r/.
Based on what t and b stand for, it is obvious that on adjnnction tim statements ,~ and troot hold of the node corresponding to the root of the anxifiary tree.
Similarly, the statements b, and b/oot hold of the node corresponding to the foot of the auxiliary tree.
Thus, ou adjunction, we unify t, with t~oot, and b,~ with b/oot.
In fact, this adjunetion is permissible only if t,.oot and t o are cmnpatible as are b/oo~ and b,.
If we do not adjoin at the node, 0, then we unify t s With b,.
At the end of a derivation, the tree generated must not have any nodes with OA constraints.
We cheek that by unifying the t and b feature structures of every node.?
More details of the definition of FTAG may be found in [Vijayashanker 1987].
We now give an example of an initial tree and an auxiliary tree.
We would like to note that, just as in a TAG, the elementary trees which are the domain of co-occurenee r strictions i available as a single unit during each step of the derivation.
Thus, most of these co-occurence constraints can be eheckcd even before the tree is used in a derivation, and this checking need not be linked to the derivation process.
2.2 Un i f i ca t ion  and  Const ra in ts Since we expect hat there are linguistic reasons determining why some auxiliary tree can be adjoined at a tree and why some cannot, or why some nodes have OA constraint, we would like to express these constraints in the feature structm:es associated with nodes.
Further, as described in Section 2.1, adjunctions will be allowed only if the appropriate f ature structures can be unified.
Thus, we expect o implement the adjoining constraints of TAGs simply by making declarative statements made in the feature structures associated with the nodes to ensure that only the appropriate trees get adjoined at a node.
The adjoining constraints are implemented in FTAG as follows.
No- tice, from Figure 4, t~ and troot, and b, and b.toa must be compatible for adjunction to occur.
We hope to specify some feature-values in these t, b statements o specify the local constraints so that 1. if some auxiliary tree should not adjoined at a node (because of its SA constraint) hen some unification involved (tu with troop, or b/oo~ with b,~) in our attempt to adjoin this auxiliary tree will fail, and 2. if a node has OA constraint, we should ensure that an appropriate auxiliary tree does get adjoined at that node.
This is ensured if t, is incompatible with b,.
The example, given in Figure 7, illustrates the implementation f both the OA and SA constraint.
The view of the root node of a from below .suggests that b statement for this node makes the assertion that the value of the tense attribute is - (or untensed).
However, the t statement should assert ense : + (since every complete sentence must be telised) 5.
Thus, an auxiliary tree whose root node will correspond to a tensed sentence and whose foot node will dominate an untensed sentence can be adjoined at this node.
Therefore, only those auxiliary trees whose main verb subcate- 5t statement is more complicated than just "view from the top", t ~tatement is a statement about the node wlfile viewing the node from the top, and hence is a statement eoncenfing the entire subtree below this node (i.e., including the part due to an auxiliary tree adjoined at the node), and ho w it constrains the derivation of the nodes wlfich are its siblings alld ancestors, bremains the same as before, and is the statement about this node and the subtree below it, without considering the adjunctlon at this node.
716 S NP VP PRO to leave ~ o:+] NP VP !
vieS[tense:] I I John t r ies Figure 6: Illustration of implementation f SA and QA constraints gorizes for an untensed sentence (or an infinitival clause) can be adjoined at the root node of this initial tree.
This shows why only auxiliary tree such as fl can be adjoined, whereas an auxiliary tree corresponding to John thinks S can not be adjoined since the verb thinks subcategories for a tensed sentence.
The example also serves to illustrate the implementa- tion of OA constraint at the root of a, since the t and b feature structures for this node are not unifiable.
2.2.1 Comments  on the Imp lementat ion  f Constraints in FTAG In the TAG formalism, local constraints are specified by enumeration.
However, specification by enumeration is not a linguistically attractive solution.
In FTAG we associate with each node two feature structures which are declarations of linguistic facts about the node.
The fact that only appropriate trees get adjoined is a corollary of the fact that only trees consistent with these declarations are acceptable trees in FTAG.
As a result, in a FTAG, constraints are dynamically instantiated and are not pre-slpecified as in a TAG.
This can be advmltageous and useful for economy of grammar specification.
For example, consider the derivation of the sentence What do you think Mary thought John saw In the TAG formalism, we are forced to replicate some auxiliary trees.
Consider the auxiliary tree fll in the TAG fragment in Figure 7.
Since the intermediate phrase what Mary thought John saw is not a complete sentence, we will have to use OA constraints at the root of the auxiliary tree ill.
However, tlfis root node should not have OA constraints when it is used in some other context; as in the case of the derivation of Mary thought John saw Peter We will need another auxiliary tree, fs, with exactly the same tree struc- ture as fll except that the root of/32 will not have an OA constraint.
Further, the root nodes in c~1 and c~2 have SA constraints that allow for adjunetion only by fll and f~2 respectively: As seen in the Figure 8, corresponding to the FTAG fragment, we can make use of the fact that constraints are dynamically inatantiated and give only one specification of ill.
When used in the derivation of What do you think Mary thought John saw troot inherits the feature inverted : + which it otherwise does not have, and broot inherits the feature inverted : - .
Thus, the node which corre- sponds to root of ill, by the dynamic instantiation ofthe feature structure, gets an OA constraint.
Note that there will not be any OA eoustraint in nodes of the final tree corresponding to What do you think Mary thought John saw.
Also, the root of the auxiliary tree, corresponding to Mary thought S, does not get OA constraint, when this tree is used in the derivation of the sentence Mary thought John saw Peter.
8 ./~--.. COMP~ I J "~ wh NP- ~P- dahri ~ NP.
I I S NP_ VP- John ~t tlP- anw ~et  o?
AUX S do NP VP n v $ I I you think s ( B3} tiP_ V.P~ Mary  ~z N I t hought olin} NP VP Mary  v S I t bought S ~ "  ~.
[ invert od: ~] COMP_ S wh NP_ VP_ John ~ NP- I I ~IOW a Figure 7: A TAG fragment /~.,a:q AUX I do ti NP VP I v//~sflnvorled:.]
you I th ink S NP_ VP- Mary v S I t bought Fignre 8: An FTAG fragment 2.3 Some Possible Linguistic Stipulations in FTAG hi this section, we will discuss some possible stipulations for a FTAG granmmr, tIowever, at this stage, we do not want to consider these stip- ulations as a part of the formalism of FTAG.
First, some of the linguistic issues pertaining to these stipulations have not yet been settled.
Sec- ondly, ou~ ~irnary ?o~cern ~to sp~ify/tl,?
FTA 9 formalism.
~,ther, if the form*lima haS t~) incorporate ~heie 4tip~ulatibns, it(can be done so, witbont ,lt~,ng tbe ~ochanlsm s,g~m0~n ly.
The current linguistic theory u~derlying TAGs .
that every foot node has *~ NA constraint.
The justification of this stipulation is isinfilar to the projection principle in Chomskys ~ransformation theory.
!It is appealing to state that the adjunetion .operation does not alter the .grarmnatical relations defined by the intermediate ree structures.
For ~example, consider the following derivation of the ~ntence Ma~y thought John saw Bil l  hit Jill.
If the derivation results in the intermediate ree corresponding to Mary thought Bil l  hit Jill, then we wofild expect o obtain the relation of Mary thinking that "Bill hit Jill".
This relation is altered by the adjunction at the node corresponding to the foot node of theauxiliary tree correspond- ing to Mary thought S. ff we wish to implement this stipulatio a, one solution is to insist that only one F-V statement is made with the foot node, i.e, the tloo~ and bloot are combined.
The definition of adjunction can be suitably altered.
The second stipulation i volves the complexity of the feature structure associated with the nodes.
So far, we have not placed any restrictions on the growth of these feature structures.
One of the possible stipulations that are being considered from the point of view of linguistic relevance is to put a bound on the information content in these feature structures.
This results in a bound on the size of feature structures and hence on the number of possible feature structures that can be associated with a node.
An FTAG grammar, which incorporates this stipulation, will be equivalent to a TAG from the point of view of generative capacity but one with an enhanced escriptive capacity.
Unbounded feature structures have been used to capture the subeat- ~egorization phenomenon by having feature structures that act like stacks (and hence unbounded in size), llowever, in TAGs, the elementary trees give the subeategorization (Iomain.
As noted earlier, the elements ub- categorized by the main vert~ in an elementary tree are part of the same elementary tree.
Thus, with the feature structures associated with the elementary trees we can just point to the subcategorized lements and do not need any further devices.
Note, that any stack based mechanism that might be needed for subeategorization s provided by the TAG formalism itself, in which the tree sets generated by TAGs have context free paths (unlike CFGs which have regular paths).
This additional power provided by the TAG formalism has been used to an advantage in giving an account of West Germanic verb-raising [Santorini 1986].
3 A Ca lcu lus  to Represent  FTAG Gram- mars We will now consider a calculus to represent FTAGs by extending on the llogieal formulation oftbature structures given by Rounds and Kasper [Rou Kasper et al.
Feature structures in this logic (henceforth called lt- !K logic) are represented asformulae.
The set of well-formed formulae in this logic is recursively defined as follows.
e::= NIL TOP a I :e l el A e2 e~.
V e2 {pl ..... P.} where a is an atomic value, el,e2 are well-formed formulae.
NIL and (TOP cl)nvey "no in(ormation" and "inconsistent information" respec- !~ively.
~aeh pl represents a path of the form li,1 : li,z .
: li,m re- ispectivel~y.
This formula is interpreted as Pt .
= p,, and is used to iexpress reentrancy.
Our representation f feature structures imilar to the I/-K logies :representation f feature structures and differs only in the clause for reen- ]traney.
Given that we want to represent the grammar itself in our cMcu- lus, we call not represent reentrancy by a finite set of paths.
For example, suppose we wish to mate that agreement features of a verb matches with ,that of its subject (note in a TAG the verb and its subject are in the same elementary tree), tile two paths to be identified can not be stated until we obtain the final derived tree.
To avoid this problem, we use a set of equations to specify the reentrancy.
The set of equations have the form given by xi = ei for 1 < i < n, where ~1,... ,xn are variables, el , .
,en !are formulae which could involve these variables.
717 For exampl% the reentrant feature structure used in Section 1.2, is represented by the set of equations z = eat : S h l : y A 2 : (eat : VP  h age : z A subject : y) y = cat : N P A agr  : z We represent a set of equations, xi = ei for 1 <: i < n as rec ( Zh .
,Xn  >~( e l , .
Let us now consider the representation f trees in FTAG and the feature structures that are a~sociated with the nodes.
The elementary feature structure associated with each elementary tree encodes certain relationships between the nodes.
Included among these relationships are the sibling and ancestor/descendent relationships; in short, the actual structure of the tree.
Thus, associated with each node is a feature struc- ture which encodes the subtree below it.
We use the attributes i E .hf to denote the i ~h child of a node.
To understand the representation f the adjunction process, consider the trees given in Figure 4, and in particular, the node y.
The feature structure associated with the node where adjunction takes place should reflect the feature structure after adjunction and as well as without ad- junction (if the constraint is not obligatory).
Further, the feature struc- ture (corresponding to the tree structure below it) to be associated with the foot node is not knoWn bnt gets specified upon adjunetion.
Thus, the bottom feature structure associated with the foot node, which is bloot be- fore adjunction, is instantiated on adjunction by unifying it with a feature structure for the tree that will finally appear below this node.
Prior to adjunction, since this feature structure is not known, we will treat it asi a variable (that gets instantiated on adjunction).
This treatment can be!
obtained if we think of the auxiliary tree as corresponding to functional over feature structures (by A-abstracting the variable corresponding toi the feature structure for the tree that will appear below the foot node).
Adjunction correponds to applying this function to th e ?feature structure corresponding to the subtree below the node where takes place.
We will formalize representation f FTAG as follows.
If we do nott consider adjoining at the node y, the formula for "y will be of the form (.. .t ,  1 Ab, A. .
/ Suppose the formula for the auxiliary tree # is of the form (t~oo~ A .
bsoo,) tim tree obtained after adjunction at the node r I will the n be represente~ by the formula (...t, A (t,?
bsoo,)  A N A .
We would like to specify one formula with the tree % and use appropri- ate operation corresponding to adjunction by ~ or the case where we do not adjoin at ~.
Imagining adjunction as function application where we~ consider auxiliary trees as functions, the representation f/3 is a function i say fz, of the form ~f .
( t ,oo ,  A.. .
(blo, ,  ^  f)) To allow tile adjunetion of ~ at the node ~, we have to represent T by ( .
t ,  A f#(bs)  ^ .
Then, corresponding to adjunction, we use function application to obtain the required formula.
But note that if we do not adioin at ~l, we would like to represent ")" by the formula ( .
t ,  A b, A ~..) which can be obtained by representing T by 718 (...t,~ A Z(b,~) A...) where I is the identity function.
Similarly, we inay have to attempt ad- junction at ~ by any auxiliary tree (SA constraints are handled by success or failure of unification).
Thus, if/31,...,/3, form the set of auxiliary tree, we have a function, F, given by V = AL( Im( I )  v .
( / )  V I ( I ) )  = ~f .
V l~( I )  v f ) and represent 7 by (.. .t,  A F(b,) A. .
Ill this way, we can represent tile elementary trees (and hence tile gram- mar) in an extended version of rt-K logic (to which we add A-abstraction and application).
3,1  Representing Tree Adjoining Grammars We will now turn our attention to the actual representation f an FTAG grammar, having considered how the individual elementary trees are rep- resented.
According to our discussion i  the previous ection, the auxiliary trees are represented as functions of the form Az.e where e is a term in FSTR which involves the variable ~.
If/31,..., #n are the auxiliary trees of a FTAG, G, then we have equations of the form fl = ~x.el f .
= Ax.e,~ e l , .
,e~ are encodings of auxiliary trees #h. .
, f l ,  as discussed above.
These expressions obey the syntax which is defined ~ccursively as follows.
e ::= NIL ::= TOP ::~ Cl A e 2 ::~ e I V g2 ::---- f (e ) where x js a variable over feature structures and f is a function variable.
In addition, as discussed above, we have another equation given by fo = Ax./I(x) V .
.V  fn(~) The initial trees are represented by a set of equations of the form !
xrn ~ ~ra where e~,..
., e m are expressions which describe the initial trees at  , .
,  ~n Note that in the expressions e l , .
,  e,, e~,.. , e,,, wherever adjunction is possible, we use the function variable f0 as described above.
The gram- mar is characterized bythe structures derivable from any one of the initial trees.
Therefore, we add ~0 ---- Zt V... V ~tn Assuming that we specify reentrancy using the Variables Yl,...~ Yk and equations Yt : e~ for 1 _ i < k, an FTAG grammar is thus represented by the set of equations of the form .first (ree(xo, xl  .
, / , ) (eo,e~,.. .
11 e"  l ,e ra ,e l , "  ,  k,g .
,g , ) ) a.2 Semantics of FTACI So far, we have only considered only the syntax of the calcnlus used tbr representing fcatnre structures and FTAG grammars.
Ia this see@m, we consider the mathematical modelling of the calculus.
This can be used to show that the set of equations describing a grammar will always have a solution, which we can consider as the denotation of the grammar.
Tire model that we present here is based on the work by llxnmds and Kssper [Pmund, et al.
1986] and in particular their notion ofsatisfiability of formulae.
[,st I" be the space of partial flmetions (with the parLial ordering E, the standard ordering on partial functions) defined by /" = (L .-~ F) + A where A is set of atoms and L is set of labels.
This space has been characterized by Pereira and Sheiber [Pereira ctal .
Any expression e (which is not a hmction) can be thought w~ upward closed subset of F (the set of partial functions which satisfy the description el.
Note that if n partial fimetion satisties a description then so will any function above it.
We let U(F) stm]d for the collection of upward closed subsets of F. Expressions are interpreted relative to an envirmnnent (since we have variables as cxpressions, wc need to consider environments which map eratables to a member of U(F)).
Functimm get interpreted as continuous functions in tim space U(/;) -~ U(F), with the enviromncnt mapping fimetion variables to fimctions on U(P).
Note that the ordering on U(F) is the inverse of set inclusion, since more functions atisfy the description of a more general featnre structure.
Because of space limitations, we cannot go into the details of the interpretations function.
[{onghly, the interpretation is as follows.
We interpret he expression a as the set containing just the atom "a"; the expressiou 1 : e is interl)reted as tire set of fnnctions which map / to an element iu the .
:at denoted by e; eonjmmtion and disjunetion are treated as intersection snd union respectively except hat we have to ensure that rely value assigned t<) a wtriable in one of the eonjunets i the same as the valne assigned to the same variable in the other conjnncg.
Since the grammar is given by a set of equation;;, the denotation is given by tim least solution.
This is obtaiued by considering the fimctiou corresponding to the set of equations in the standard way, and obtaining its least fixpoint.
Details of these issues rnay be found in [Vij ayashaaker i 9 In [Vijayashanker 1987], we have shown that any set of equations has a solution.
Thus, we can Live semantics for recursivc set of eqnatkms which may be used to describe cyclic feature structure.
For example, we give the solution for equations uch as x: :  f : xAg:a As shown in [V ]ayas ran mr 1987], we can obtain the least lixedopoint by assuming the le~rst vahm for x (which is the cntirc set of partial fnnetions or the intcrl)retatkm of NIL) mrd obtaining better and better approxima-, lions.
The least npper bound of these approximations (which will give the least fixed-point) corresponds to the reqnired cyclic structure, ;is desired.
4 Conc lus ions  and  }~Nl~ure Work We have shown a method of embedding TAGs in a feature structmm based framewo?k.
This system takes advantage of the extended omain of locality of TAGs and allows lingusitic statements abont cooccurencc of features of dependent i errLs to be stated within elententary trees.
We have shown thst we can make a clearer statement of adjoining constraints in FTAGa than in TAGs.
The specification of local constraints in a tAG is by enmneration, which is not satisfactory from the liuguistic point of view.
We show that in FTAG, we em~ avoid such specilications, instead the dedarative statements nrade about nodes are sufficient o mmure Ihat only the appropriate flees get adjoined at a node.
Furthermore, we also illu.strate how duplication or iuformation can be aw~ided in FTACs in comparisoJ~ with TA(Us.
I~ cau bc shown that aualyses~ that require ex tensions of TA($s using multi-component adjoining (simultaneous adjunc lion of a set of trees in distinct nodes of an dementary tree) ~ defined in []oshi 1987, Kroeh 1987], can be easily stated iu FTAGs.
It is possible to parse an I,"]?A(I grammar using the Earley-style parsel given by [Sehabes t aL 1988].
This l,;arley-style parser can extended in the same way that Sheiber extended the Earley parser lee PAI3I: II [Slfieber 1985b].
The reason this extensi,~lt of the TAll parser to one fl)t I:FAG is po,~;sible fi)llows from the lact that the treatment of haviJ,g the t and b feature structures fl)r every node in FI)A(~ is compatible with the I characterization, adopted in the parsing algorithm in [Schabes t al.
:19881, of a node in le.rms of two subs[rings.
In [Vii ayashanker 1987], we haw~ prop osed a restr toted version (.f FTA G In a manaer similar to GPSG, we place a bound on the information con- tent or feature structures associated with the nodes of trees used ill the grammar.
The resulting system, 1U"TAG, g~nerates the same language as TAGs, and yet retains an increased escriptive and geaeraLive capacity due to the extended omain of locality o{ TAGs.
Fiually, in this lml)er, we have brMly discussed a calculus to represent FTAG grammars.
This cab:alas is an exteation of the llounds-Kasper logic for fi:ature structures, qhe extmltions deM with A abstraction ove~ feature structures and flmetiou application, which is used to ehagacterizd auxiliary trees and the adjunctiml operation.
[Vijayashanker 19871 Lives a detailed escription of this calculus and its semantics.
References Joshi, A. K. 1985.
1low Mnch Context-Sensitivity ~ Necessary for Chai: acterizing Structural I)escription.~-- lhee Adjohling Crammms.
Karttunen, and A. Zwicl,y, Eds., Nal~tral Lasgaaqe ]Jroce.%ia 3 -- Theoretical, 6om.palaiio~al nd Psychological ()cr:JlJeclie~.
Camb~idv/~ University Press, New gork, NY.
aoshi, A. K t987.
An Introduction to qtec Adjoining (~FalltJli2{l~.
11}2 A. Manaster-II,amer, Ed., Mathematics of Laapuape.
3ohn lienjamins, Antsterdam.
J~shi, A. K., Levy, L. S., mid Ihkahaahi, M. 1975.
Tree Ad.im~ct Cram mars .
Kasper, E.. and Kounds, W. C. 1986.
A Logical Semantics fr,r ["ealm~ Structures.
In: 24 ~h meeting Assoc.
Subjaceney in a Tree A,Ijoh g C,ramnmr.
In: A. Manaster-Raumr, I",d., Malhemalics of Language..loire I~enjamh,s, A m sterdam.
Kroch, A. and Josbi, A. K. 1985.
Liuguiatic lgele)Jaaee oj 7?cc Adjoiaiag Grammars.
Technieal Rel)orl; MS-CIS 85-18, Deparl;mcnl of (OItIpULel and hlformatiml Science, University of Pennsylvania, Philadell,hia Pereira, F. C. N. and Shieber, S. 1984.
The Semantics of Gramme1 ~br- malisms Seen aa Computer Languages.
la: IO th luter~talionM C, nfcrenee on Compalalional Linguistics.
I(~mnds, W. C. and Kaspcr, 1{.
A complete Logical (:;dcalm+ 17,L l/ecord Stru(:tures Representing Linguistic hlfornratiou.
11l: tEE/; 5;ym posture os Loyic and Computer Science.
The West Germanic Verb~t~aisi~vi CvJ>;b~*clio,~: A 7~ec Adjoining Grammar Analysis.
Masters thesis, University el Pcmv sylvania, Philadelphi~ h PA. Schabes, Y. and Joshi, A. K. 198g.
An Earley-Type Parsing Algorithm for ~t~ee Adjoining Grarmnars.
In: 26 *h inertia 9 Assoc.
Shieber, S. M. An Introduction to UazficaZioa.
Based Apl,roachc to (/r~m- mar.
Presented as a Tntor[al SalMon 23 d meeting Assoe (onqmi,.
Shieber, S. M. 1985.
Using R~sttiction to Extend Parsieg Algorilhtxm for Comlflex.feature based Formalisms.
In: 23 ra mecii~ 9 A.~soc.
CompsL I)ing.address a,d page.s82--93.
Vijayashanker, K. 1987.
A ,q_Judy of Tcc Atl~oinin9 (;tammar.,~.
PM) thesis, University of Pennsylvania, lqJihulelphia, Pa. 73 9
