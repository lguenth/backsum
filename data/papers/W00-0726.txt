Text chunking is a useful preprocessing step for parsing.
There has been a large interest in recognizing non-overlapping noun phrases (Ramshaw and Marcus (1995) and follow-up papers) but relatively little has been written about identifying phrases of other syntactic categories.
The CoNLL-2000 shared task attempts to fill this gap.
Text chunking consists of dividing a text into phrases in such a way that syntactically related words become member of the same phrase.
These phrases are non-overlapping which means that one word can only be a member of one chunk Here is an example sentence: [NP He ] [vp reckons ] [NP the current account deficit] [vp will narrow] [pp to [NP only 1.8 billion] [pp in] [NP September] .
Chunks have been represented as groups of words between square brackets.
A tag next to the open bracket denotes the type of the chunk.
As far as we know, there are no annotated corpora available which contain specific information about dividing sentences into chunks of words of arbitrary types.
We have chosen to work with a corpus with parse information, the Wall Street Journal WSJ part of the Penn Treebank II corpus (Marcus et al., 1993), and to extract chunk information from the parse trees in this corpus.
We will give a global description of the various chunk types in the next section.
The chunk types are based on the syntactic category part (i.e. without function tag) of the bracket label in the Treebank (cf.
Bies (1995) p.35).
Roughly, a chunk contains everything to the left of and including the syntactic head of the constituent of the same name.
Some Treebank constituents do not have related chunks.
The head of S (simple declarative clause) for example is normally thought to be the verb, but as the verb is already part of the VP chunk, no S chunk exists in our example sentence.
Besides the head, a chunk also contains premodifiers (like determiners and adjectives in NPs), but no postmodifiers or arguments.
This is why the PP chunk only contains the preposition, and not the argument NP, and the SBAR chunk consists of only the complementizer.
There are several difficulties when converting trees into chunks.
In the most simple case, a chunk is just a syntactic constituent without any further embedded constituents, like the NPs in our examples.
In some cases, the chunk contains only what is left after other chunks have been removed from the constituent, cf.
&quot;(VP loves (NP Mary))&quot; above, or ADJPs and PPs below.
We will discuss some special cases during the following description of the individual chunk types.
Our NP chunks are very similar to the ones of Ramshaw and Marcus (1995).
Specifically, possessive NP constructions are split in front of the possessive marker (e.g.
[NP Eastern Airlines] [NP creditors]) and the handling of coordinated NPs follows the Treebank annotators.
However, as Ramshaw and Marcus do not describe the details of their conversion algorithm, results may differ in difficult cases, e.g. involving NAC and NX.1 An ADJP constituent inside an NP constituent becomes part of the NP chunk: (NP The (ADJP most volatile) form) [NP the most volatile form] In the Treebank, verb phrases are highly embedded; see e.g. the following sentence which contains four VP constituents.
Following Ramshaw and Marcus' V-type chunks, this sentence will only contain one VP chunk: ((S (NP-SBJ-3 Mr. Icahn) (VP may not (VP want (S (NP-SBJ *-3) (VP to (VP sell ...))))) . ))
[NP Mr. Icahn] [vp may not want to sell] It is still possible however to have one VP chunk directly follow another: [NP The impression [NP I] [vp have got] [vp is] [NP they] [vp 'd love to do] [PRT away] [pp with] [NP it].
In this case the two VP constituents did not overlap in the Treebank.
Adverbs/adverbial phrases become part of the VP chunk (as long as they are in front of the main verb): (VP could (ADVP very well) (VP show ... )) [vp could very well show] In contrast to Ramshaw and Marcus (1995), predicative adjectives of the verb are not part of the VP chunk, e.g. in &quot;[NP they [vp are 1 [paw unhappy ]&quot;.
In inverted sentences, the auxiliary verb is not part of any verb phrase in the Treebank.
Consequently it does not belong to any VP chunk: (NP-SBJ *-1) (VP to (VP be (ADJPPRD excellent)))))) , but ... [CONJP Not only ] does [NP your product [vp have to be [ADJP excellent , but ... ADVP chunks mostly correspond to ADVP constituents in the Treebank.
However, ADVPs inside ADJPs or inside VPs if in front of the main verb are assimilated into the ADJP respectively VP chunk.
On the other hand, ADVPs that contain an NP make two chunks: (ADVP-TMP (NP a year) earlier) [NP a year] [ADVP earlier] ADJPs inside NPs are assimilated into the NP.
And parallel to ADVPs, ADJPs that contain an NP make two chunks: (ADJP-PRD (NP 68 years) old) [NP 68 years] [ADJP old] It would be interesting to see how changing these decisions (as can be done in the Treebank-to-chunk conversion script2) influences the chunking task.
Most PP chunks just consist of one word (the preposition) with the part-of-speech tag IN.
This does not mean, though, that finding PP chunks is completely trivial.
INs can also constitute an SBAR chunk (see below) and some PP chunks contain more than one word.
This is the case with fixed multi-word prepositions such as such as, because of, due to, with prepositions preceded by a modifier: well above, just after, even in, particularly among or with coordinated prepositions: inside and outside.
We think that PPs behave sufficiently differently from NPs in a sentence for not wanting to group them into one class (as Ramshaw and Marcus did in their N-type chunks), and that on the other hand tagging all NP chunks inside a PP as I-PP would only confuse the chunker.
We therefore chose not to handle the recognition of true PPs (prep.+NP) during this first chunking step.
SBAR chunks mostly consist of one word (the complementizer) with the part-of-speech tag IN, but like multi-word prepositions, there are also multi-word complementizers: even though, so that, just as, even if, as if, only if.
Conjunctions can consist of more than one word as well: as well as, instead of, rather than, not only, but also.
One-word conjunctions (like and, or) are not annotated as CONJP in the Treebank, and are consequently no CONJP chunks in our data.
The Treebank uses the PRT constituent to annotate verb particles, and our PRT chunk does the same.
The only multi-word particle is on and off This chunk type should be easy to recognize as it should coincide with the partof-speech tag RP, but through tagging errors it is sometimes also assigned IN (preposition) or RB (adverb).
INTJ is an interjection phrase/chunk like no, oh, hello, alas, good grief!.
It is quite rare.
The list marker LST is even rarer.
Examples are 1., 2., 3., first, second, a, b, c. It might consist of two words: the number and the period.
The UCP chunk is reminiscent of the UCP (unlike coordinated phrase) constituent in the Treebank.
Arguably, the conjunction is the head of the UCP, so most UCP chunks consist of conjunctions like and and or.
UCPs are the rarest chunks and are probably not very useful for other NLP tasks.
Tokens outside any chunk are mostly punctuation signs and the conjunctions in ordinary coordinated phrases.
The word not may also be outside of any chunk.
This happens in two cases: Either not is not inside the VP constituent in the Treebank annotation e.g. in ... (VP have (VP told (NP-1 clients) (S (NP-SBJ *-1) not (VP to (VP ship (NP anything)))))) or not is not followed by another verb (because the main verb is a form of to be).
As the right chunk boundary is defined by the chunk's head, i.e. the main verb in this case, not is then in fact a postmodifier and as such not included in the chunk: &quot;... [SBAR that ] [NP there ] [vp were ] n't [NP any major problems] .&quot; All chunks were automatically extracted from the parsed version of the Treebank, guided by the tree structure, the syntactic constituent labels, the part-of-speech tags and by knowledge about which tags can be heads of which constituents.
However, some trees are very complex and some annotations are inconsistent.
What to think about a VP in which the main verb is tagged as NN (common noun)?
Either we allow NNs as heads of VPs (not very elegant but which is what we did) or we have a VP without a head.
The first solution might also introduce errors elsewhere... As Ramshaw and Marcus (1995) already noted: &quot;While this automatic derivation process introduced a small percentage of errors on its own, it was the only practical way both to provide the amount of training data required and to allow for fully-automatic testing.&quot;
For the CoNLL shared task, we have chosen to work with the same sections of the Penn Treebank as the widely used data set for base noun phrase recognition (Ramshaw and Marcus, 1995): WSJ sections 15-18 of the Penn Treebank as training material and section 20 as test materia13.
The chunks in the data were selected to match the descriptions in the previous section.
An overview of the chunk types in the training data can be found in table 1.
De data sets contain tokens (words and punctuation marks), information about the location of sentence boundaries and information about chunk boundaries.
Additionally, a partof-speech (POS) tag was assigned to each token by a standard POS tagger (Brill (1994) trained on the Penn Treebank).
We used these POS tags rather than the Treebank ones in order to make sure that the performance rates obtained for this data are realistic estimates for data for which no treebank POS tags are available.
In our example sentence in section 2, we have used brackets for encoding text chunks.
In the data sets we have represented chunks with three types of tags: B-X first word of a chunk of type X I-X non-initial word in an X chunk 0 word outside of any chunk This representation type is based on a representation proposed by Ramshaw and Marcus (1995) for noun phrase chunks.
The three tag groups are sufficient for encoding the chunks in the data since these are non-overlapping.
Using these chunk tags makes it possible to approach the chunking task as a word classification task.
We can use chunk tags for representing our example sentence in the following way: The output of a chunk recognizer may contain inconsistencies in the chunk tags in case a word tagged I-X follows a word tagged 0 or I-Y, with X and Y being different.
These inconsistencies can be resolved by assuming that such I-X tags start a new chunk.
The performance on this task is measured with three rates.
First, the percentage of detected phrases that are correct (precision).
Second, the percentage of phrases in the data that were found by the chunker (recall).
And third, the Fo=1 rate which is equal to (132+1)*precision*recall / (02*precision+recall) with 0.1 (van Rijsbergen, 1975).
The latter rate has been used as the target for optimization4.
The eleven systems that have been applied to the CoNLL-2000 shared task can be divided in four groups: Vilain and Day (2000) approached the shared task in three different ways.
The most successful was an application of the Alembic parser which uses transformation-based rules.
Johansson (2000) uses context-sensitive and contextfree rules for transforming part-of-speech (POS) tag sequences to chunk tag sequences.
Dejean (2000) has applied the theory refinement system ALLiS to the shared task.
In order to obtain a system which could process XML formatted data while using context information, he has used three extra tools.
Veenstra and Van den Bosch (2000) examined different parameter settings of a memory-based learning algorithm.
They found that modified value difference metric applied to POS information only worked best.
A large number of the systems applied to the CoNLL-2000 shared task uses statistical methods.
Pla, Molina and Prieto (2000) use a finite-state version of Markov Models.
They started with using POS information only and obtained a better performance when lexical information was used.
Zhou, Tey and Su (2000) implemented a chunk tagger based on HMMs.
The initial performance of the tagger was improved by a post-process correction method based on error driven learning and by incorporating chunk probabilities generated by a memory-based learning process.
The two other statistical systems use maximum-entropy based methods.
Osborne (2000) trained Ratnaparkhi's maximum-entropy POS tagger to output chunk tags.
Koeling (2000) used a standard maximum-entropy learner for generating chunk tags from words and POS tags.
Both have tested different feature combinations before finding an optimal one and their final results are close to each other.
Three systems use system combination.
Tjong Kim Sang (2000) trained and tested five memory-based learning systems to produce different representations of the chunk tags.
A combination of the five by majority voting performed better than the individual parts.
Van Halteren (2000) used Weighted Probability Distribution Voting (WPDV) for combining the results of four WPDV chunk taggers and a memory-based chunk tagger.
Again the combination outperformed the individual systems.
Kudoh and Matsumoto (2000) created 231 support vector machine classifiers to predict the unique pairs of chunk tags.
The results of the classifiers were combined by a dynamic programming algorithm.
The performance of the systems can be found in Table 2.
A baseline performance was obtained by selecting the chunk tag most frequently associated with a POS tag.
All systems outperform the baseline.
The majority of the systems reached an Fo=1 score between 91.50 and 92.50.
Two approaches performed a lot better: the combination system WPDV used by Van Halteren and the Support Vector Machines used by Kudoh and Matsumoto.
In the early nineties, Abney (1991) proposed to approach parsing by starting with finding related chunks of words.
By then, Church (1988) had already reported on recognition of base noun phrases with statistical methods.
Ramshaw and Marcus (1995) approached chunking by using a machine learning method.
Their work has inspired many others to study the application of learning methods to noun phrase chunking5.
Other chunk types have not received the same attention as NP chunks.
The most complete work is Buchholz et al. (1999), which presents results for NP, VP, PP, ADJP and ADVP chunks.
Veenstra (1999) works with NP, VP and PP chunks.
Both he and Buchholz et al. use data generated by the script that produced the CoNLL-2000 shared task data sets.
Ratnaparkhi (1998) has recognized arbitrary chunks as part of a parsing task but did not report on the chunking performance.
Part of the Sparkle project has concentrated on finding various sorts of chunks for the different languages 'An elaborate overview of the work done on noun phrase chunking can be found on http://lcg-www.uia. ac.bererikt/research/np-chunking.html (Carroll et al., 1997).
We have presented an introduction to the CoNLL-2000 shared task: dividing text into syntactically related non-overlapping groups of words, so-called text chunking.
For this task we have generated training and test data from the Penn Treebank.
This data has been processed by eleven systems.
The best performing system was a combination of Support Vector Machines submitted by Taku Kudoh and Yuji Matsumoto.
It obtained an Fo=1 score of 93.48 on this task.
We would like to thank the members of the CNTS - Language Technology Group in Antwerp, Belgium and the members of the ILK group in Tilburg, The Netherlands for valuable discussions and comments.
Tjong Kim Sang is funded by the European TMR network Learning Computational Grammars.
Buchholz is supported by the Netherlands Organization for Scientific Research (NWO).
